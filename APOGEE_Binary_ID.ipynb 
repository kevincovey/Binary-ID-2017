{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import apogee.tools.read as apread\n",
    "from matplotlib import pyplot as plt\n",
    "import pandas as pd\n",
    "import csv\n",
    "from apogee.tools import bitmask\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "'''def calcR(x,plusminus):\n",
    "    ccfCenter = max(x)\n",
    "    #print(len(x))\n",
    "    primary = np.where(x == ccfCenter)\n",
    "    peak_loc = primary[0][0]\n",
    "    print(peak_loc)\n",
    "    endpoint = peak_loc+plusminus\n",
    "    startpoint= peak_loc-plusminus\n",
    "    Mirror = (x[peak_loc:endpoint])[::-1]\n",
    "    sigmaA = np.sqrt(1.0 / (2.0 * len(Mirror)) * np.sum((x[startpoint:peak_loc] - Mirror)**2))\n",
    "    r = np.max(x) / (np.sqrt(2.0) * sigmaA)\n",
    "    #print(r)\n",
    "    return r''';"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def calcR(x,pm):\n",
    "    ccfCenter = max(x)\n",
    "    primary = np.where(x == ccfCenter)\n",
    "    peak_loc = primary[0][0]\n",
    "    if peak_loc < pm: \n",
    "        pm = peak_loc\n",
    "    if peak_loc > 401 - pm:\n",
    "        pm = 401 - peak_loc\n",
    "        \n",
    "    #print(pm)\n",
    "    endpoint = peak_loc+pm\n",
    "    startpoint= peak_loc-pm\n",
    "    Mirror = (x[peak_loc:endpoint])[::-1]\n",
    "    sigmaA = np.sqrt(1.0 / (2.0 * len(Mirror)) * np.sum((x[startpoint:peak_loc] - Mirror)**2))\n",
    "    r = np.max(x) / (np.sqrt(2.0) * sigmaA)\n",
    "    #print(r)\n",
    "    return r\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Notes:\n",
    "    The calls to calculate R had to be reduced by a value of 1. This is because the reflected array and the other half of the array were reported to have two different sizes therefore could not be boradcasted together. We will either need to justify this or seek the issue that caused the two to be of varying lengths in the first place.\n",
    "    Find locations where the array start point is less than zero or places where it will exceed 401. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1503\n",
      "/Volumes/coveydata-5/APOGEE_Spectra/APOGEE2_DR14/dr14/apogee/spectro/redux/r8/stars/apo25m/4424/apStar-r8-2M00102299+5833135.fits\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x119dd3400>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11d5f30b8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nYYFWLu3dvl5r+sNF3ck+XspFLy5nwZYsHh3Xk1tHxPD01X3ZlV3At0kHPeu+tXwvITYryx+9iPDg\nAF5atKvW57Y7nGita13ndGit+WpDBgu2ZOF01v/zi7NDkwr3gpJy/vrtVi56aTmjX/y5yoffjI4W\nlvHKkt1kHSv2dyl+98ayFCLCArl/bDwX9ohk8fZsT/htOnCUhcmH+P3oOIbFRdCrQwsWJLvCvaTc\nwcLkLMb360hIoO/TH31xQXw7bjgvmqxjJUwd1pW7RscBML5vB/p2asmrS/dQ7nCSfqSIhclZTB3W\nlZh2Ydw5Mpafduaw9eCxKs+5J7uAiW/8SvcnfyDhmSV88Ou+al/7reUp9Pvbojr/SFT29caDPPrl\nZu7930Zm/5bmWX6suJznFmxnwNOLmDYrUc6CeQqKyuw8MTeZ+z/bREpOATNX7GXsy8v5MjHdbzU1\nmXD/aUc2l76ygk/WpjF1aFdGdo/gmfnbSWvg84HMWr2fP3y6oUEuw+Z0am7/aD2v/7SHSW+u5mih\nfy8YUe5wUlzmn4N4lmzP5pfdufx+dBwhgVYu69uBrGMlbErPp9zh5Ml5W4lqEcS0C1zhetXATmxI\nO0pmfjHLduZQUGpnUj22ZNyUUrx4w0A2PXUpz0/qj8XoyVssikfG9eDAkSLeXZnKeytTUcBtI2MA\nuHVkDC2CA6rsOygstTP9kw0czC/m/rHdGRDdimfmb+enHdkV1tucns+Li3ZxotTO27/sJTPftz/+\ndoeTf/+4kwHRrRgW25YXftjJwfxiUnIKuOL1lbz36z66RoSydEc2X2/MqPsJz0DO8RJeWbKbN39O\n4Vixuc+X/+S8rXy27gALk7O45JUVPL9wJ6m5hTwxN5mUnAK/1ORTuCulxiuldimlUpRSj1dzv1JK\nvW7cv0UpNaj+S63ZF+vTuXNWIq1Dbcy9ZwTPTerPf25MwKoU765MrfWx323O5J7ZG0jJOVHretVZ\nuSeXv323jYXJh3jw86TTLb9Ga1LzSErP56ZhXTl8opS/fbetzq/Rv+45zLRZiazbV78H2GQfL2H0\nv39m4N8X80NyVt0PqEer9x7mwTmb6N2xJXeMjAVgXN/2hAVa+WRNGv9cuJPtWcd5ZmJfz6wV9zlj\n5m/J5OM1++nYKpjh3SIarMY21Vyqb0zPKCb078C/f9zFrDVpXDcomo6tQgBoGWxj2qg4Fm/PZsXu\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11d8c1780>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1504\n",
      "/Volumes/coveydata-5/APOGEE_Spectra/APOGEE2_DR14/dr14/apogee/spectro/redux/r8/stars/apo25m/4590/apStar-r8-2M00102423+0018469.fits\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x119dfb080>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "ZeroDivisionError",
     "evalue": "float division by zero",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-50-8d300ec41eb3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     37\u001b[0m                 \u001b[0;31m#print('--Visit '+str(visit)+'--')\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m                 \u001b[0;31m#R401 = calcR(ccf,200)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m                 \u001b[0mR151\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcalcR\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mccf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m75\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m                 \u001b[0mR101\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcalcR\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mccf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m                 \u001b[0mR51\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcalcR\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mccf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m25\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-46-d2f4ec711205>\u001b[0m in \u001b[0;36mcalcR\u001b[0;34m(x, pm)\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0mstartpoint\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mpeak_loc\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mpm\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0mMirror\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpeak_loc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mendpoint\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m     \u001b[0msigmaA\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1.0\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m2.0\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMirror\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstartpoint\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mpeak_loc\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mMirror\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m     \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2.0\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0msigmaA\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m     \u001b[0;31m#print(r)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mZeroDivisionError\u001b[0m: float division by zero"
     ]
    }
   ],
   "source": [
    "import os.path\n",
    "from pathlib import Path\n",
    "\n",
    "#for i in range(len(locationIDs)):\n",
    "for i in range(1503,1505):\n",
    "    locationID = locationIDs[i]\n",
    "    apogeeID = apogeeIDs[i]\n",
    "    print(i)\n",
    "    my_file = Path('/Volumes/coveydata-5/APOGEE_Spectra/APOGEE2_DR14/dr14/apogee/spectro/redux/r8/stars/apo25m/'+str(locationID)+'/'+'apStar-r8-'+str(apogeeID)+'.fits')\n",
    "    #if my_file.is_file():\n",
    "        #path = '/Volumes/coveydata-5/APOGEE_Spectra/APOGEE2_DR14/dr14/apogee/spectro/redux/r8/stars/apo25m/'+str(locationID)+'/'+'apStar-r8-'+str(apogeeID)+'.fits'\n",
    "    try:\n",
    "        asb_path = my_file.resolve()\n",
    "    except FileNotFoundError:\n",
    "        path = '/Volumes/coveydata-5/APOGEE_Spectra/APOGEE2_DR14/dr14/apogee/spectro/redux/r8/stars/apo25m/'+str(locationID)+'/'+'apStarC-r8-'+str(apogeeID)+'.fits'\n",
    "        print(path)\n",
    "    else:\n",
    "        path = '/Volumes/coveydata-5/APOGEE_Spectra/APOGEE2_DR14/dr14/apogee/spectro/redux/r8/stars/apo25m/'+str(locationID)+'/'+'apStar-r8-'+str(apogeeID)+'.fits'\n",
    "        print(path)\n",
    "\n",
    "    data = fits.open(path)\n",
    "    point = data[9]\n",
    "    xccf = point.data[0][32]\n",
    "    CCF = point.data[0][27]\n",
    "    HDU0 = fits.getheader(path,0)\n",
    "    nvisits = HDU0['NVISITS']\n",
    "    for visit in range(0,nvisits):\n",
    "        if nvisits != 1:\n",
    "            ccf = CCF[visit+2]\n",
    "            plt.plot(ccf,label='Visit '+str(visit))\n",
    "            plt.legend(loc='upper right')\n",
    "            plt.show()\n",
    "            nonzeroes = np.count_nonzero(ccf) # This condition is meant to eliminate visits that are empty\n",
    "            if nonzeroes >= 1:\n",
    "                bs_pt = bisector(xccf, ccf)\n",
    "                x_range = xrange(bs_pt[0])\n",
    "                #print('--Visit '+str(visit)+'--')\n",
    "                #R401 = calcR(ccf,200)\n",
    "                R151 = calcR(ccf,75)\n",
    "                R101 = calcR(ccf,50)\n",
    "                R51 = calcR(ccf,25)\n",
    "                Ratios = r_ratio(R51,R151,R101)\n",
    "                r1 = Ratios[0]\n",
    "                r2 = Ratios[1]\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "'''def calcR(ccf,pos1,pos2):\n",
    "        if pos1==0 and pos2==401:\n",
    "            ccfCenter = max(ccf).index()\n",
    "            pos1+= 1\n",
    "            Mirror = (x[ccfCenter:pos2])[::-1]\n",
    "            sigmaA = np.sqrt(1.0 / (2.0 * len(Mirror)) * np.sum((x[pos1:ccfCenter] - Mirror)**2))\n",
    "            r = np.max(x) / (np.sqrt(2.0) * sigmaA)\n",
    "            print(r)\n",
    "   \n",
    "        if pos1==125 and pos2==276:\n",
    "            ccfCenter = max(ccf).index()\n",
    "            pos1+= 1\n",
    "            Mirror = (x[ccfCenter:pos2])[::-1]\n",
    "            sigmaA = np.sqrt(1.0 / (2.0 * len(Mirror)) * np.sum((x[pos1:ccfCenter] - Mirror)**2))\n",
    "            r = np.max(x) / (np.sqrt(2.0) * sigmaA)\n",
    "            print(r)\n",
    "    \n",
    "        if pos1==150 and pos2==251:\n",
    "            ccfCenter = max(ccf).index()\n",
    "            pos1+= 1\n",
    "            Mirror = (x[ccfCenter:pos2])[::-1]\n",
    "            sigmaA = np.sqrt(1.0 / (2.0 * len(Mirror)) * np.sum((x[pos1:ccfCenter] - Mirror)**2))\n",
    "            r = np.max(x) / (np.sqrt(2.0) * sigmaA)\n",
    "            print(r)\n",
    "      \n",
    "        if pos1==175 and pos2==226:\n",
    "            ccfCenter = max(ccf).index()\n",
    "            pos1+= 1\n",
    "            Mirror = (x[ccfCenter:pos2])[::-1]\n",
    "            sigmaA = np.sqrt(1.0 / (2.0 * len(Mirror)) * np.sum((x[pos1:ccfCenter] - Mirror)**2))\n",
    "            r = np.max(x) / (np.sqrt(2.0) * sigmaA)\n",
    "            print(r)\n",
    "\n",
    "            return r'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "'''#Calculate R-Values for given ranges\n",
    "def calcR401(x, pos1=0, pos2=401):\n",
    "        # Calculates the value of R with the given array x\n",
    "        # Returns:  The value of R for whole CCF\n",
    "        # Assupmtion: the center peak lies in CCF lag space 201\n",
    "        ccfCenter = 201\n",
    "        pos1+= 1\n",
    "        Mirror = (x[ccfCenter:pos2])[::-1]\n",
    "        sigmaA = np.sqrt(1.0 / (2.0 * len(Mirror)) * np.sum((x[pos1:ccfCenter] - Mirror)**2))\n",
    "        r401 = np.max(x) / (np.sqrt(2.0) * sigmaA)\n",
    "        #print('R401 = '+str(r401))\n",
    "        return r401\n",
    "\n",
    "def calcR151(x, pos1=125, pos2=276):\n",
    "        ccfCenter = 201\n",
    "        pos1+= 1\n",
    "        Mirror = (x[ccfCenter:pos2])[::-1]\n",
    "        sigmaA = np.sqrt(1.0 / (2.0 * len(Mirror)) * np.sum((x[pos1:ccfCenter] - Mirror)**2))\n",
    "        r151 = np.max(x) / (np.sqrt(2.0) * sigmaA)\n",
    "        #print('R151 = '+str(r151))\n",
    "        return r151\n",
    "\n",
    "def calcR101(x, pos1=150, pos2=251):\n",
    "        ccfCenter = 201\n",
    "        pos1+= 1\n",
    "        Mirror = (x[ccfCenter:pos2])[::-1]\n",
    "        sigmaA = np.sqrt(1.0 / (2.0 * len(Mirror)) * np.sum((x[pos1:ccfCenter] - Mirror)**2))\n",
    "        r101 = np.max(x) / (np.sqrt(2.0) * sigmaA)\n",
    "        #print('R101 = '+str(r101))\n",
    "        return r101\n",
    "    \n",
    "def calcR51(x, pos1=175, pos2=226):\n",
    "        ccfCenter = 201\n",
    "        pos1+= 1\n",
    "        Mirror = (x[ccfCenter:pos2])[::-1]\n",
    "        sigmaA = np.sqrt(1.0 / (2.0 * len(Mirror)) * np.sum((x[pos1:ccfCenter] - Mirror)**2))\n",
    "        r51 = np.max(x) / (np.sqrt(2.0) * sigmaA)\n",
    "        #print('R51 = '+str(r51))\n",
    "        return r51''';"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def bisector(xccf,yccf):\n",
    "    height = max(yccf) - min(yccf)\n",
    "    slices = height/4.0\n",
    "    bounds = np.arange(min(yccf),height,slices)\n",
    "    if len(bounds) != 0:\n",
    "        z1 = (bounds[0] + bounds[1])/2.0\n",
    "        z2 = (bounds[1] + bounds[2])/2.0\n",
    "        z3 = (bounds[2] + bounds[3])/2.0\n",
    "        z4 = (bounds[3] + bounds[4])/2.0\n",
    "        y_bisector = np.array([z1,z2,z3,z4])\n",
    "\n",
    "        x_bisector = []\n",
    "        x0 = []\n",
    "        x1 = []\n",
    "        x2 = []\n",
    "        x3 = []\n",
    "        for i in range(len(yccf)):\n",
    "            if yccf[i] <= bounds[4] and yccf[i] > bounds[3]:\n",
    "                x0.append(xccf[i])\n",
    "        x_0 = (np.mean(x0))\n",
    "        x_bisector.append(x_0)\n",
    "\n",
    "        i = 0\n",
    "        for i in range(len(yccf)):\n",
    "            if yccf[i] <= bounds[3] and yccf[i] >= bounds[2]:\n",
    "                x1.append(xccf[i])\n",
    "        x_1=(np.mean(x1))\n",
    "        x_bisector.append(x_1)\n",
    "\n",
    "        i = 0\n",
    "        for i in range(len(yccf)):\n",
    "            if yccf[i] <= bounds[2] and yccf[i] >= bounds[1]:\n",
    "                x2.append(xccf[i])\n",
    "        x_2=(np.mean(x2))\n",
    "        x_bisector.append(x_2)\n",
    "\n",
    "        i = 0\n",
    "        for i in range(len(yccf)):\n",
    "            if yccf[i] <= bounds[1] and yccf[i] >= bounds[0]:\n",
    "                x3.append(xccf[i])\n",
    "        x_3=(np.mean(x3))\n",
    "        x_bisector.append(x_3)\n",
    "\n",
    "        bisector_pts = np.vstack([x_bisector,y_bisector])\n",
    "        #print(bisector_pts)\n",
    "        return(bisector_pts)\n",
    "    #else:\n",
    "        #x_bisector = 0.0\n",
    "        #y_bisector = 0.0\n",
    "        #error = np.vstack([x_bisector,y_bisector])\n",
    "        return(error)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def xrange(x_bisector):\n",
    "    #print(x_bisector)\n",
    "    xr = max(x_bisector) - min(x_bisector)\n",
    "    return xr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "'''def array_builder(locationID,apogeeID,nvisits):\n",
    "    header = apread.apStar(locationID,apogeeID,ext=0,header=True)\n",
    "    data = apread.apStar(locationID,apogeeID,ext=9,header=False)\n",
    "    nvisits=header[1]['NVISITS']\n",
    "    y = []\n",
    "    for visit in range(nvisits):\n",
    "        if nvisits != 1:\n",
    "            CCF = data['CCF'][0][2+visit]\n",
    "            a = calcR151(CCF)\n",
    "            y.append(a)\n",
    "    return y''';"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "'''\n",
    "This function was being used for finding the width of a CCF by locating the maxima, find the midpoint (y-direction),\n",
    "and take the difference in lag space (x-direction) of the indicides that told where the sides of the CCF was.\n",
    "The later steps still need to be implimented. \n",
    "'''\n",
    "def FindMaxima(xccf,CCF,peak_loc):\n",
    "    thresh_down = 1\n",
    "    if peak_loc > 7:\n",
    "        peak_low = peak_loc-2\n",
    "    else:\n",
    "        peak_low = peak_loc+1\n",
    "    while thresh_down > 0:\n",
    "        if peak_low > 2 and (CCF[peak_low-1] - CCF[peak_low] < 0) and CCF[peak_low-1] > 0:\n",
    "            peak_low = peak_loc-1\n",
    "        else:\n",
    "            thresh_down = 0\n",
    "    thresh_up = 1\n",
    "    if peak_loc < 394:\n",
    "        peak_high = peak_loc+2\n",
    "    else:\n",
    "        peak_high = peak_loc-1\n",
    "    while thresh_up > 0:\n",
    "        if peak_high < 399 and (CCF[peak_high+1] - CCF[peak_high] < 0) and (CCF[peak_high+1] > 0):\n",
    "            peak_high = peak_high+1\n",
    "        else:\n",
    "            thresh_up = 0\n",
    "    n_lag = np.arange(0,402,1)\n",
    "    walk = np.zeroes(n_lag)\n",
    "    \n",
    "'''    if peak_low < 0:\n",
    "        peak_low = 0\n",
    "    if else peak_high > n_lag-1:\n",
    "        peak_high = n_lag-1\n",
    "        \n",
    "    walk[peak_low:peak_high] = 1''';\n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Notes\n",
    "\n",
    "We will need to save r151, r101, r401 and r401 as arrays that contain these values for all visits of a given star. From each visit, we need to find the smallest r values. Additionally, we will need to find the largest max x-range.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Calculate the R-ratios for the likely_binary function\n",
    "def r_ratio(r51,r151,r101):\n",
    "        r1_ratio = r151/r101\n",
    "        r2_ratio = r101/r51\n",
    "        R1_ratio = math.log10(r1_ratio)\n",
    "        R2_ratio = math.log10(r2_ratio)\n",
    "        ratios = [round(R1_ratio,3),round(R2_ratio,3)]\n",
    "        return ratios"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#def idSB2s(CCF,xr,r51,r151,r101): # cuts to identify SB2s\n",
    "    #min_r51 = min(r51)\n",
    "    #min_r101 = min(r101)\n",
    "    #min_r151 = min(r151)\n",
    "    #peak_401 = max(CCF) - min(CCF)\n",
    "    #max_xr = max(xr)\n",
    "def idSB2s(R1_ratio, R2_ratio,r51,r151,r101,xr): # cuts to identify SB2s from Kevin's IDL Routine\n",
    "    min_r51 = r51\n",
    "    min_r101 = r101\n",
    "    min_r151 = r151\n",
    "    r1_ratio = R1_ratio\n",
    "    r2_ratio = R2_ratio\n",
    "    max_xr = xr\n",
    "    \n",
    "    likely_sb2s = np.where((math.log10(r1_ratio) > 0.06 and (math.log10(r1_ratio) < 0.13 and \n",
    "                            math.log10(min_r101) < 0.83)) or (math.log10(r2_ratio) > 0.05 and \n",
    "                            math.log10(r2_ratio) < 0.02 and math.log10(min_r51) < 0.83) and\n",
    "                            math.log10(min_r51) > 0.25 and math.log10(min_r101) > 0.22 and\n",
    "                            math.log10(peak_401) > -0.5 and math.log10(max_xr) < 2.3 and \n",
    "                            math.log10(max_xr) > 0.7\n",
    "                          )\n",
    "    return likely_sb2s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from astropy.io import fits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "allStarDR14 = apread.allStar(rmcommissioning=False,main=False,ak=True,akvers='targ',adddist=False)\n",
    "\n",
    "locationIDs = allStarDR14['LOCATION_ID']\n",
    "apogeeIDs = allStarDR14['APOGEE_ID']\n",
    "apogeeIDs = [s.decode('utf-8') for s in apogeeIDs]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--Visit 0--\n",
      "30.9921455868\n",
      "20.405690916\n",
      "16.8107365529\n",
      "11.9395452568\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nfJ6JUAIAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11da995f8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--Visit 1--\n",
      "28.8214357988\n",
      "18.6966915109\n",
      "15.3947869215\n",
      "11.0821340579\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11d382128>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--Visit 2--\n",
      "30.0986007812\n",
      "19.852141112\n",
      "16.4504989308\n",
      "11.7812567462\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11cfb5470>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Note: This will be used to test if the new R function is working appropriately\n",
    "for i in range(1):\n",
    "        locationID = locationIDs[i]\n",
    "        apogeeID = apogeeIDs[i]\n",
    "        path = '/Volumes/coveydata-5/APOGEE_Spectra/APOGEE2_DR14/dr14/apogee/spectro/redux/r8/stars/apo25m/'+str(locationID)+'/'+'apStar-r8-'+str(apogeeID)+'.fits'\n",
    "        if len(path) == 129:\n",
    "            data = fits.open(path)\n",
    "            point = data[9]\n",
    "            xccf = point.data[0][32]\n",
    "            CCF = point.data[0][27]\n",
    "            HDU0 = fits.getheader(path,0)\n",
    "            nvisits = HDU0['NVISITS']\n",
    "            for visit in range(0,nvisits):\n",
    "                #snr = HDU0['SNVIS'+str(visit+2)]\n",
    "                if nvisits != 1:\n",
    "                    ccf = CCF[visit+2]\n",
    "                    nonzeroes = np.count_nonzero(ccf) # This condition is meant to eliminate visits that are empty\n",
    "                    if nonzeroes >= 1:\n",
    "                        bs_pt = bisector(xccf, ccf)\n",
    "                        x_range = xrange(bs_pt[0])\n",
    "                        print('--Visit '+str(visit)+'--')\n",
    "                        R401 = calcR(ccf,0,400)\n",
    "                        R151 = calcR(ccf,125,275)\n",
    "                        R101 = calcR(ccf,150,250)\n",
    "                        R51 = calcR(ccf,175,225)\n",
    "                        Ratios = r_ratio(R51,R151,R101)\n",
    "                        r1 = Ratios[0]\n",
    "                        r2 = Ratios[1]\n",
    "                        plt.plot(ccf,label='Visit '+str(visit))\n",
    "                        plt.legend(loc='upper right')\n",
    "                        plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### NOTE: The below cell is the original code/main routine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '/Volumes/coveydata-4/APOGEE_Spectra/APOGEE2_DR14/dr14/apogee/spectro/redux/r8/stars/apo25m/4126/apStar-r8-2M12382107-0720490.fits'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-19-26f1ef598b4e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m         \u001b[0;31m#print(len(path))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m129\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfits\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m             \u001b[0mpoint\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m9\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m             \u001b[0mxccf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpoint\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/reynaa/anaconda/lib/python3.6/site-packages/astropy/io/fits/hdu/hdulist.py\u001b[0m in \u001b[0;36mfitsopen\u001b[0;34m(name, mode, memmap, save_backup, cache, lazy_load_hdus, **kwargs)\u001b[0m\n\u001b[1;32m    164\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    165\u001b[0m     return HDUList.fromfile(name, mode, memmap, save_backup, cache,\n\u001b[0;32m--> 166\u001b[0;31m                             lazy_load_hdus, **kwargs)\n\u001b[0m\u001b[1;32m    167\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    168\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/reynaa/anaconda/lib/python3.6/site-packages/astropy/io/fits/hdu/hdulist.py\u001b[0m in \u001b[0;36mfromfile\u001b[0;34m(cls, fileobj, mode, memmap, save_backup, cache, lazy_load_hdus, **kwargs)\u001b[0m\n\u001b[1;32m    402\u001b[0m         return cls._readfrom(fileobj=fileobj, mode=mode, memmap=memmap,\n\u001b[1;32m    403\u001b[0m                              \u001b[0msave_backup\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msave_backup\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcache\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcache\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 404\u001b[0;31m                              lazy_load_hdus=lazy_load_hdus, **kwargs)\n\u001b[0m\u001b[1;32m    405\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    406\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mclassmethod\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/reynaa/anaconda/lib/python3.6/site-packages/astropy/io/fits/hdu/hdulist.py\u001b[0m in \u001b[0;36m_readfrom\u001b[0;34m(cls, fileobj, data, mode, memmap, save_backup, cache, lazy_load_hdus, **kwargs)\u001b[0m\n\u001b[1;32m   1013\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_File\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1014\u001b[0m                 \u001b[0;31m# instantiate a FITS file object (ffo)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1015\u001b[0;31m                 \u001b[0mfileobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_File\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmemmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmemmap\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcache\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcache\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1016\u001b[0m             \u001b[0;31m# The pyfits mode is determined by the _File initializer if the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1017\u001b[0m             \u001b[0;31m# supplied mode was None\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/reynaa/anaconda/lib/python3.6/site-packages/astropy/utils/decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    505\u001b[0m                         \u001b[0;31m# one with the name of the new argument to the function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    506\u001b[0m                         \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnew_name\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 507\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    508\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    509\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/reynaa/anaconda/lib/python3.6/site-packages/astropy/io/fits/file.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, fileobj, mode, memmap, overwrite, cache)\u001b[0m\n\u001b[1;32m    142\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open_fileobj\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moverwrite\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    143\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstring_types\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 144\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open_filename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moverwrite\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    145\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    146\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open_filelike\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfileobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moverwrite\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/reynaa/anaconda/lib/python3.6/site-packages/astropy/io/fits/file.py\u001b[0m in \u001b[0;36m_open_filename\u001b[0;34m(self, filename, mode, overwrite)\u001b[0m\n\u001b[1;32m    497\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_file\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbz2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBZ2File\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbzip2_mode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    498\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 499\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_file\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfileobj_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIO_FITS_MODES\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    500\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    501\u001b[0m         \u001b[0;31m# Make certain we're back at the beginning of the file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/reynaa/anaconda/lib/python3.6/site-packages/astropy/io/fits/util.py\u001b[0m in \u001b[0;36mfileobj_open\u001b[0;34m(filename, mode)\u001b[0m\n\u001b[1;32m    405\u001b[0m         \"\"\"\n\u001b[1;32m    406\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 407\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffering\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    408\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    409\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/Volumes/coveydata-4/APOGEE_Spectra/APOGEE2_DR14/dr14/apogee/spectro/redux/r8/stars/apo25m/4126/apStar-r8-2M12382107-0720490.fits'"
     ]
    }
   ],
   "source": [
    "#xccf = np.arange(0,402,1)\n",
    "\n",
    "with open('DR14_Stats_Catalog.csv','w') as output:\n",
    "    column = ['Location_ID','Apogee_ID','x_range','R51','R101','R151','R401','R151/R101','R101/R51','Visit']\n",
    "    writer = csv.DictWriter(output,delimiter='\\t',fieldnames=column)\n",
    "    writer.writeheader()\n",
    "    \n",
    "    for i in range(len(locationIDs)):\n",
    "        locationID = locationIDs[i]\n",
    "        apogeeID = apogeeIDs[i]\n",
    "        path = '/Volumes/coveydata-5/APOGEE_Spectra/APOGEE2_DR14/dr14/apogee/spectro/redux/r8/stars/apo25m/'+str(locationID)+'/'+'apStar-r8-'+str(apogeeID)+'.fits'\n",
    "        #print(len(path))\n",
    "        if len(path) == 129:\n",
    "            data = fits.open(path)\n",
    "            point = data[9]\n",
    "            xccf = point.data[0][32]\n",
    "            CCF = point.data[0][27]\n",
    "            HDU0 = fits.getheader(path,0)\n",
    "            nvisits = HDU0['NVISITS']\n",
    "            for visit in range(0,nvisits):\n",
    "                #snr = HDU0['SNVIS'+str(visit+2)]\n",
    "                if nvisits != 1:\n",
    "                    ccf = CCF[visit+2]\n",
    "                    nonzeroes = np.count_nonzero(ccf) # This condition is meant to eliminate visits that are empty\n",
    "                    if nonzeroes >= 1:\n",
    "                        bs_pt = bisector(xccf, ccf)\n",
    "                        x_range = xrange(bs_pt[0])\n",
    "                        R401 = calcR401(ccf)\n",
    "                        R151 = calcR151(ccf)\n",
    "                        R101 = calcR101(ccf)\n",
    "                        R51 = calcR51(ccf)\n",
    "                        Ratios = r_ratio(R51,R151,R101)\n",
    "                        r1 = Ratios[0]\n",
    "                        r2 = Ratios[1]\n",
    "                        # Output file onto CoveyData Server. Name: DR14_Stats_Catalog.csv \n",
    "                        # This file will hold all the stats for every visit for each star in DR14.\n",
    "                        #Path: /Volumes/CoveyData-4/APOGEE_Spectra/APOGEE_DR14/BinaryID/\n",
    "                        writer.writerow({'Location_ID':locationID,'Apogee_ID':apogeeID,'x_range':round(x_range,3),\n",
    "                                         'R51':round(R51,3),'R101':round(R101,3),'R151':round(R151,3),\n",
    "                                         'R401':round(R401,3),'R151/R101':r1,'R101/R51':r2,'Visit':visit})\n",
    "        else:\n",
    "            path = '/Volumes/coveydata-5/APOGEE_Spectra/APOGEE2_DR14/dr14/apogee/spectro/redux/r8/stars/apo25m/'+str(locationID)+'/'+'apStarC-r8-'+str(apogeeID)+'.fits'\n",
    "            data = fits.open(path)\n",
    "            print('I am apStarC file!')\n",
    "            point = data[9]\n",
    "            xccf = point.data[0][32]\n",
    "            CCF = point.data[0][27]\n",
    "            HDU = fits.getheader(path,0)\n",
    "            nvisits = HDU0['NVISITS']\n",
    "            for visit in range(0,nvisits):\n",
    "                #snr = HDU['SNVIS'+str(visit+2)]\n",
    "                if nvisits != 1:\n",
    "                    ccfs = CCF[visit+2]\n",
    "                    nonzero = np.count_nonzero(ccfs)\n",
    "                    if nonzero >= 1:\n",
    "                        bs_pt = bisector(xccf, ccfs)\n",
    "                        x_range = xrange(bs_pt[0])\n",
    "                        R401 = calcR401(ccfs)\n",
    "                        R151 = calcR151(ccfs)\n",
    "                        R101 = calcR101(ccfs)\n",
    "                        R51 = calcR51(ccfs)\n",
    "                        Ratios = r_ratio(R51,R151,R101)\n",
    "                        r1 = Ratios[0]\n",
    "                        r2 = Ratios[1]\n",
    "                        writer.writerow({'Location_ID':locationID,'Apogee_ID':apogeeID,'x_range':round(x_range,3),\n",
    "                                         'R51':round(R51,3),'R101':round(R101,3),'R151':round(R151,3),\n",
    "                                         'R401':round(R401,3),'R151/R101':r1,'R101/R51':r2,'Visit':visit})       \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Read in the file and find how many are SB2s. \n",
    "stats = pd.read_csv('DR14_Stats_Catalog.csv',delimiter='/t')\n",
    "FieldID = stats['Location_ID']\n",
    "TwoMassID = stats['Apogee_ID']\n",
    "Star_Visit = stats['Visit']\n",
    "logR1 = stats['R151/R101']\n",
    "logR2 = stats['R101/R51']\n",
    "R51s = stats['R51']\n",
    "R101s = stats['R101']\n",
    "R151s = stats['R151']\n",
    "xr_value = stats['x_range']\n",
    "\n",
    "with open('DR14_SB2_Catalog.csv','w') as files:\n",
    "    column = ['Location_ID','Apogee_ID']\n",
    "    writer = csv.DictWriter(files,delimiter='\\t',fieldnames=column)\n",
    "    writer.writeheader()\n",
    "    i = 0\n",
    "    r1 = []\n",
    "    r2 = []\n",
    "    r51 = []\n",
    "    r101 = []\n",
    "    r151 = []\n",
    "    xranges = []\n",
    "    SB2 = []\n",
    "    for i in range(len(FieldID)):\n",
    "        if Visit[i] == Visit[i]:\n",
    "            r1.append(logR1[i])\n",
    "            r2.append(logR2[i])\n",
    "            r51.append(R51s[i])\n",
    "            r101.append(R101s[i])\n",
    "            r151.append(R151s[i])\n",
    "            xranges.append(xr_value[i])\n",
    "        likely_binary = likely_SB2s(r1, r2,r51,r151,r101,xranges)\n",
    "        index_locID = FieldID[likely_binary]\n",
    "        index_apoID = TwoMassID[likely_binary]\n",
    "        SB2.append([index_locID,index_apoID])\n",
    "        writer.writerow({'Location_ID': SB2[0] ,'Apogee_ID':SB2[1]})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Check that these are true SB2s visually! Open the file of SB2s and plot the CCFs\n",
    "Sb2_data = pd.read_csv('DR14_SB2_Catalog.csv',delimiter='/t')\n",
    "locIds = Sb2_data['Location_ID']\n",
    "apoIds = Sb2_data['Apogee_ID']\n",
    "\n",
    "for j in range(len(apoIds)):\n",
    "    location_ID = locIds[j]\n",
    "    apogee_ID = apoIds[j]\n",
    "    header = apread.apStar(location_ID,apogee_ID,ext=0,header=True)\n",
    "    data = apread.apStar(location_ID,apogee_ID,ext=9,header=False)\n",
    "    nvisits=header[1]['NVISITS']\n",
    "    \n",
    "    for visit in range(nvisits):\n",
    "        if nvisits != 1:\n",
    "            CCF = data['CCF'][0][2+visit]\n",
    "            plt.title(str(location_ID)+str(apogee_ID))\n",
    "            plt.plot(CCF+visit,label='Visit '+ str(visit))\n",
    "            plt.xlabel('CCF Lag',fontsize=10)\n",
    "            plt.ylabel('$\\widehat{CCF}$ Units', fontsize=10)\n",
    "            plt.legend(loc='upper right')\n",
    "            #plt.savefig('PSB2Fig_'+str(location_ID)+'-'+str(apogee_ID)+'-'+str(visit)+'.png',dpi=900)\n",
    "            #plt.xlim(100,300)\n",
    "            #plt.show()\n",
    "            #plt.close('all')\n",
    "                    \n",
    "        else:\n",
    "            CCF = data['CCF'][0]\n",
    "    #except FileNotFoundError:\n",
    "            #pass\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Issue: \n",
    "Current array for R values is being over written. It will find the min but then suddenly skip to an empty array. It must be the main programs for loop!\n",
    "\n",
    "Additionally, Something is wrong with the bisector x-value calculations. They are in decimal values instead of whole integers. The code below is less precise than the one above"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Main Routine\n",
    "xccf = np.arange(0,402,1)\n",
    "with open('SB2_Catalog.csv','w') as output:\n",
    "    names = ['Location_ID','Apogee_ID','R_401','R_151','R_101','R_51','Max_XR','Visit']\n",
    "    writer = csv.DictWriter(output,delimiter='\\t',fieldnames=names)\n",
    "    writer.writeheader()\n",
    "    #try:\n",
    "    for i in range(20):\n",
    "            location_ID = locationIDs[i]\n",
    "            apogee_ID = apogeeIDs[i]\n",
    "            header = apread.apStar(location_ID,apogee_ID,ext=0,header=True)\n",
    "            data = apread.apStar(location_ID,apogee_ID,ext=9,header=False)\n",
    "            nvisits=header[1]['NVISITS']\n",
    "            #R151 = array_builder(location_ID,apogee_ID,nvisits)\n",
    "            XR = []\n",
    "            for visit in range(nvisits):\n",
    "                if nvisits != 1:\n",
    "                    CCF = data['CCF'][0][2+visit]\n",
    "                    bs_pts = bisector(xccf,CCF)\n",
    "                    x_range = xrange(bs_pts[0])\n",
    "                    print(x_range)\n",
    "                    R401 = calcR401(CCF)\n",
    "                    R151 = calcR151(CCF)\n",
    "                    R101 = calcR101(CCF)\n",
    "                    R51 = calcR51(CCF)\n",
    "                    XR.append(x_range)\n",
    "                    writer.writerow({'Location_ID':location_ID,'Apogee_ID':apogee_ID,'R_401':round(R401,3)\n",
    "                                 ,'R_151':round(R151,3),'R_101':round(R101,3),'R_51':round(R51,3),\n",
    "                                     'Max_XR':round(max(XR),3), 'Visit':visit})\n",
    "                                     #'Max_XR':round(x_range,3), 'Visit':visit})\n",
    "                    #plt.plot(CCF,label=str(apogee_ID))\n",
    "                    #plt.legend(loc='upper right')\n",
    "                    #plt.xlim(100,300)\n",
    "                    #plt.show()\n",
    "                    \n",
    "                else:\n",
    "                    CCF = data['CCF'][0]\n",
    "                #writer.writerow({'Location_ID':location_ID,'Apogee_ID':apogee_ID,'R_401':round(R401,3)\n",
    "                                 #,'R_151':round(R151,3),'R_101':round(R101,3),'R_51':round(R51,3),\n",
    "                                    # 'Max_XR':round(max(XR),3), 'Visit':visit})\n",
    "               \n",
    "    #except FileNotFoundError:\n",
    "            #pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
