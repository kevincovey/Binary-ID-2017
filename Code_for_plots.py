import numpy as np
from matplotlib import pyplot as plt
import pandas as pd
import csv
from astropy.io import fits
import os.path
from pathlib import Path

'''
Open DR14_Stats_Catalog.csv. Over all visits for a star we will need to:
1. Find the minimum R values: R 51, R 101, R151
2. Find the maximum x-range values
3. Find the minimum R ratios: R 151/R 101 and R 101/R 51
 '''

def matches(xx,y,r51,r101,r151,xr,R1,R2,peak_val):
   # Generate empty lists to hold values of matched APOGEE IDs
    match51 = []
    match101 = []
    match151 = []
    matchxr = []
    matchR1 = []
    matchR2 = []
    matchlocid = []
    matchapoid = []
    matchpeak = []
    #Command for finding unique values (in this case, APOGEE IDs)
    uniqueID = np.unique(y)
    # Loop through all the unique apogeeIDs to find the smallest R values, largest x-range, and the apogee and location IDs
    # that correspond to these values
    for i in range(len(uniqueID)):
        newID = np.where(y == uniqueID[i])
        newer = newID[0]
        small = r51[newer] 
        y2 = y[newer]
        x2 = xx[newer]
        peak = peak_val[newer]
        # Take smallest R 51 value of the list found above
        little = min(small)
        loc_of_small = np.where(small == little)
        small_loc = loc_of_small[0][0]
        x = round(little,4)
        match51.append(x)
        matchapoid.append(y2[small_loc])
        matchlocid.append(x2[small_loc])
        matchpeak.append(peak[small_loc])
    # Process above is repeated for other empty lists
    for j in range(len(uniqueID)):
        new = np.where(y == uniqueID[j])
        element = new[0]
        R101 = r101[element]
        lil = min(R101)
        x2 = round(lil,4)
        match101.append(x2)

    for k in range(len(uniqueID)):
        New = np.where(y == uniqueID[k])
        part = New[0]
        R151 = r151[part]
        bit = min(R151)
        x3 = round(bit,4)
        match151.append(x3)

    for p in range(len(uniqueID)):
        mew = np.where(y == uniqueID[p])
        elmnt = mew[0]
        XR = xr[elmnt]
        bit2 = max(XR)
        x4 = round(bit2,4)
        matchxr.append(x4)

    for o in range(len(uniqueID)):
        nID = np.where(y == uniqueID[o])
        news = nID[0]
        s = R1[news]
        l = min(s)
        x5 = round(l,4)
        matchR1.append(x5)

    for q in range(len(uniqueID)):
        mID = np.where(y == uniqueID[q])
        ns = mID[0]
        pico = R2[ns]
        tiny = min(pico)
        x6 = round(tiny,4)
        matchR2.append(x6)
    return match51, match101, match151, matchxr,matchR1,matchR2, matchlocid,matchapoid,matchpeak

## Read in DR14 catalog generated by APOGEE_ID.py
filepath2 = 'DR14StatsCatalog.csv'
data_dr14 = pd.read_csv(filepath2)
locationid = data_dr14['LocationID']
apogeeid = data_dr14['ApogeeID']
visits = np.asarray(data_dr14['Visit'])
snr = np.asarray(data_dr14['SNR'])
R51 = np.asarray(data_dr14['log(R51)'])
R101 = np.asarray(data_dr14['log(R101)'])
R151 = np.asarray(data_dr14['log(R151)'])
xranges = np.asarray(data_dr14['log(xr)'])
ratio1 = np.asarray(data_dr14['log(Ratio1)'])
ratio2 = np.asarray(data_dr14['log(Ratio2)'])
peak_value = np.asarray(data_dr14['Peak_value'])
print(len(R51))

#Send parameters to function "matches"
dr14 = matches(locationid,apogeeid,R51,R101,R151,xranges,ratio1,ratio2,peak_value)
dr14_R51 = dr14[0]
dr14_R101 = dr14[1]
dr14_R151 = dr14[2]
dr14_xr = dr14[3]
dr14_ratio1 = dr14[4]
dr14_ratio2 =dr14[5]
dr14_locid = dr14[6]
dr14_apoid = dr14[7]
dr14_peaks = dr14[8]

